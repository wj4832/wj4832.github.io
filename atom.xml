<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wj4832.github.io</id>
    <title>瓜丢</title>
    <updated>2023-02-22T12:59:41.500Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wj4832.github.io"/>
    <link rel="self" href="https://wj4832.github.io/atom.xml"/>
    <logo>https://wj4832.github.io/images/avatar.png</logo>
    <icon>https://wj4832.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 瓜丢</rights>
    <entry>
        <title type="html"><![CDATA[你可能对Python的strip方法有一些误解]]></title>
        <id>https://wj4832.github.io/post/ni-ke-neng-dui-python-de-strip-fang-fa-you-yi-xie-wu-jie/</id>
        <link href="https://wj4832.github.io/post/ni-ke-neng-dui-python-de-strip-fang-fa-you-yi-xie-wu-jie/">
        </link>
        <updated>2023-02-19T10:40:11.000Z</updated>
        <summary type="html"><![CDATA[<p><em>使用strip方法对字符串去除首尾特定字符时，出现了非预期的效果？</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>使用strip方法对字符串去除首尾特定字符时，出现了非预期的效果？</em></p>
<!-- more -->
<h1 id="问题">问题</h1>
<p>在Python的一些交流群和论坛里，看到不止一个人提出过这样的问题：为什么去除字符串首尾特定字符的时候，出现的结果很奇怪。比如：</p>
<pre><code>a_string = &quot;append this list with string paap&quot;
resp = a_string.strip(&quot;ap&quot;)
print(resp)
# 预期结果  pend this list with string pa
# 实际结果  end this list with string
</code></pre>
<h1 id="原因">原因</h1>
<p>查看strip方法，如下：</p>
<pre><code>def strip(self, *args, **kwargs): # real signature unknown
    &quot;&quot;&quot;
    Return a copy of the string with leading and trailing whitespace removed.
    
    If chars is given and not None, remove characters in chars instead.
    &quot;&quot;&quot;
    pass
</code></pre>
<p>方法注释的意思是：当你使用strip方法时，如果不传入参数，那么此时会把你想要处理的字符串对象，去除首尾的空格后返回结果；<br>
如果传入了参数，且参数不是None的时候，那么就会在被处理字符串的首尾分别删去你传入的参数字符串中每一个元素，然后再返回。<br>
所以，上面的代码中，a_string.strip(&quot;ap&quot;)并不是删去首尾的&quot;ap&quot;字符，而是在首尾处分别查找是否存在字符&quot;a&quot;或者&quot;p&quot;，一直删除到字符串不以&quot;a&quot;或者&quot;p&quot;开头/结尾的时候才停止，然后返回结果。</p>
<h1 id="解决方案">解决方案</h1>
<ol>
<li>使用removeprefix删除字符串开头特定字符，removesuffix删除结尾特定字符（<strong>推荐</strong>）。如：</li>
</ol>
<pre><code>a_string = &quot;append this list with string paap&quot;
resp = a_string.removeprefix(&quot;ap&quot;).removesuffix(&quot;ap&quot;)
print(resp)
# 预期结果  pend this list with string pa
# 实际结果  pend this list with string pa
</code></pre>
<ol start="2">
<li>使用re.sub方法，在正则表达式中指定开头和结尾的字符串。如：</li>
</ol>
<pre><code>a_string = &quot;append this list with string paap&quot;
resp = resp = re.sub(&quot;^ap|ap$&quot;, &quot;&quot;, a_string)
print(resp)
# 预期结果  pend this list with string pa
# 实际结果  pend this list with string pa
</code></pre>
<p><em>以上两种方法更推荐第一种方法，因为无论是在简易程度还是运行速度方面，第一种方法都要明显更好于第二种方法。<br>
测试代码如下：</em></p>
<pre><code>import re
import time

a_string = &quot;append this list with string paap&quot;
loop_count = 1000000
def a():
    start_time = time.time()
    for i in range(loop_count):
        re.sub(&quot;^ap|ap$&quot;, &quot;&quot;, a_string)
    print(&quot;正则方法用时：&quot;, time.time()-start_time)

def b():
    start_time = time.time()
    for i in range(loop_count):
        a_string.removeprefix(&quot;ap&quot;).removesuffix(&quot;ap&quot;)
    print(&quot;remove方法用时：&quot;, time.time()-start_time)

a()  
b()
# 正则方法用时： 1.4415099620819092
# remove方法用时： 0.09711885452270508
</code></pre>
]]></content>
    </entry>
</feed>